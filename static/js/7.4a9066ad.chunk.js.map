{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.tsx","components/Login/Login.module.css","components/Login/LoginReduxForm.tsx","components/Login/Login.tsx"],"names":["module","exports","FormControl","input","meta","touched","error","children","hasError","element","className","styles","formControl","Textarea","props","restProps","child","Input","required","value","maxLengthCreator","maxLength","length","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","name","component","validate","type","style","formSummaryError","captcha","src","connect","state","isAuth","auth","loginTC","to","loginContainer","login","href","formData","email","password","rememberMe"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,eAAe,oCAAoC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,oJCKxKC,EAAc,SAAC,GAA6D,EAA5DC,MAA6D,IAAD,IAArDC,KAAOC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,MAAQC,EAA6B,EAA7BA,SAC3CC,GADwE,EAAnBC,QAC1CJ,GAAWC,GAE5B,OACI,yBAAKI,UAAWC,IAAOC,YAAc,KAAOJ,EAAWG,IAAOL,MAAQ,KAClE,6BACKC,GAEL,6BACKC,GAAY,0BAAME,UAAWC,IAAOL,OAAxB,iBAKhBO,EAAW,SAACC,GAA8B,IAC5CX,EAAoCW,EAApCX,MAAuBY,GAAaD,EAA7BV,KAA6BU,EAAvBE,MAD8B,YACPF,EADO,2BAElD,OAAO,kBAACZ,EAAgBY,EAAO,8CAAcX,EAAWY,MAG/CE,EAAQ,SAACH,GAAgB,IAC3BX,EAAoCW,EAApCX,MAAuBY,GAAaD,EAA7BV,KAA6BU,EAAvBE,MADa,YACUF,EADV,2BAEjC,OAAO,kBAACZ,EAAgBY,EAAO,2CAAWX,EAAWY,O,iCCzBzD,oEAAO,IAAMG,EAAW,SAACC,GACrB,IAAIA,EACJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAuB,SAACF,GACpD,GAAIA,EAAMG,OAASD,EAAW,MAAM,cAAN,OAAqBA,EAArB,e,oBCPlCrB,EAAOC,QAAU,CAAC,eAAiB,8BAA8B,MAAQ,uB,kHCsD5DsB,EAAiBC,YAAuC,CAACC,KAAM,SAA9CD,EAtCgE,SAACV,GAC3F,OACI,0BAAMY,SAAUZ,EAAMa,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,YAAa,QACbC,KAAM,QACNC,UAAWd,IACXe,SAAU,CAACd,QAGtB,6BACI,kBAACU,EAAA,EAAD,CAAOC,YAAa,WACbC,KAAM,WACNC,UAAWd,IACXe,SAAU,CAACd,KACXe,KAAM,cAGhBnB,EAAMR,OAAS,yBAAKI,UAAWwB,IAAMC,kBACjCrB,EAAMR,OAEX,6BACI,kBAACsB,EAAA,EAAD,CAAOG,UAAW,QACXD,KAAM,aACNG,KAAM,aAHjB,gBAMCnB,EAAMsB,SAAW,yBAAKC,IAAKvB,EAAMsB,UACjCtB,EAAMsB,SAAY,kBAACR,EAAA,EAAD,CAAOG,UAAW,QACXD,KAAM,YAEhC,6BACI,8C,yCCJDQ,uBARS,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,OACnBJ,QAASG,EAAME,KAAKL,WAKY,CAACM,aAA1BJ,EA9BD,SAACxB,GAMX,OAAIA,EAAM0B,OAAe,kBAAC,IAAD,CAAUG,GAAI,aAGnC,yBAAKjC,UAAWwB,IAAMU,gBAClB,yBAAKlC,UAAWwB,IAAMW,OAClB,6BACI,4DAAiC,uBAAGC,KAAK,yCAAR,SACjC,sEACA,wDACA,8CAEJ,kBAACvB,EAAD,CAAgBG,SAfX,SAACqB,GACdjC,EAAM4B,QAAQK,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASX,UAcnCA,QAAStB,EAAMsB","file":"static/js/7.4a9066ad.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form-control\":\"FormsControls_form-control__3atU1\",\"formControl\":\"FormsControls_formControl__2HRcq\",\"error\":\"FormsControls_error__WpP4m\",\"formSummaryError\":\"FormsControls_formSummaryError__BXqTl\"};","import React from 'react';\r\nimport styles from './FormsControls.module.css'\r\n\r\n\r\ntype TextareaPropsType = HTMLFormElement & { placeholder: string }\r\n\r\nconst FormControl = ({input, meta: {touched, error}, children, element,}: any) => {\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span className={styles.error}>some error</span>}\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nexport const Textarea = (props: TextareaPropsType) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}></textarea></FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}></input></FormControl>\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport const required = (value: any) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: any) => {\r\n    if (value.length > maxLength) return `Max length ${maxLength} symbols`\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginContainer\":\"Login_loginContainer__1vHP4\",\"login\":\"Login_login__bRlNW\"};","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Input} from '../common/FormsControls/FormsControls';\r\nimport {required} from '../../utils/validators/validators';\r\nimport style from '../common/FormsControls/FormsControls.module.css'\r\n\r\nexport type FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string | null\r\n}\r\n\r\nexport type LoginPropsType = {\r\n    captcha: null | string\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType,LoginPropsType> & LoginPropsType > = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'email'}\r\n                       name={'email'}\r\n                       component={Input}\r\n                       validate={[required]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field placeholder={'password'}\r\n                       name={'password'}\r\n                       component={Input}\r\n                       validate={[required]}\r\n                       type={'password'}\r\n                />\r\n            </div>\r\n            {props.error && <div className={style.formSummaryError}>\r\n                {props.error}\r\n            </div>}\r\n            <div>\r\n                <Field component={'input'}\r\n                       name={'rememberMe'}\r\n                       type={'checkbox'}\r\n                /> remember me\r\n            </div>\r\n            {props.captcha && <img src={props.captcha}/>}\r\n            {props.captcha &&  <Field component={'input'}\r\n                                      name={'captcha'}\r\n                                      />}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const LoginReduxForm = reduxForm<FormDataType,LoginPropsType>({form: 'login'})(LoginForm)\r\n","import React from 'react';\r\nimport {FormDataType, LoginReduxForm} from './LoginReduxForm';\r\nimport {connect} from 'react-redux';\r\nimport {loginTC} from '../../reducers/AuthReducer/auth-reducer';\r\nimport {RootState} from '../../redux/redux-store';\r\nimport {Redirect} from 'react-router';\r\nimport style from './Login.module.css'\r\n\r\n\r\ntype LoginPropsType = {\r\n    loginTC: (email: string, password: string, rememberMe: boolean, captcha: string | null) => void\r\n    isAuth: boolean\r\n    captcha: null | string\r\n}\r\n\r\nconst Login = (props: LoginPropsType) => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.loginTC(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (props.isAuth) return <Redirect to={'/profile'}/>\r\n\r\n    return (\r\n        <div className={style.loginContainer}>\r\n            <div className={style.login}>\r\n                <div>\r\n                    <p>To log in get registered here <a href='https://social-network.samuraijs.com/'>here</a></p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </div>\r\n                <LoginReduxForm onSubmit={onSubmit} captcha={props.captcha}/>\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        captcha: state.auth.captcha\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {loginTC})(Login);"],"sourceRoot":""}