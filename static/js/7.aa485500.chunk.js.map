{"version":3,"sources":["components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormsControls.module.css","utils/validators/validators.tsx","components/common/Button/Button.tsx","components/common/Button/Button.module.css","components/Login/Login.module.css","components/Login/LoginReduxForm.tsx","components/Login/Login.tsx"],"names":["FormControl","input","meta","touched","error","children","hasError","element","className","style","formControl","Textarea","props","restProps","child","Input","module","exports","required","value","maxLengthCreator","maxLength","length","Button","React","memo","name","rest","button","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","field","Field","placeholder","component","validate","type","formSummaryError","captcha","src","connect","state","isAuth","auth","loginTC","to","loginContainer","login","href","formData","email","password","rememberMe"],"mappings":"mOAMMA,EAAc,SAAC,GAA6D,EAA5DC,MAA6D,IAAD,IAArDC,KAAOC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,MAAQC,EAA6B,EAA7BA,SAC3CC,GADwE,EAAnBC,QAC1CJ,GAAWC,GAE5B,OACI,yBAAKI,UAAWC,IAAMC,YAAc,KAAOJ,EAAWG,IAAML,MAAQ,KAChE,6BACKC,GAEL,6BACKC,GAAY,0BAAME,UAAWC,IAAML,OAAvB,iBAKhBO,EAAW,SAACC,GAA8B,IAC5CX,EAAoCW,EAApCX,MAAuBY,GAAaD,EAA7BV,KAA6BU,EAAvBE,MAD8B,YACPF,EADO,2BAElD,OAAO,kBAACZ,EAAgBY,EAAO,8CAAcX,EAAWY,MAG/CE,EAAQ,SAACH,GAAgB,IAC3BX,EAAoCW,EAApCX,MAAuBY,GAAaD,EAA7BV,KAA6BU,EAAvBE,MADa,YACUF,EADV,2BAEjC,OAAO,kBAACZ,EAAgBY,EAAO,yCAAOJ,UAAWC,IAAMR,OAAWA,EAAWY,O,oBC1BjFG,EAAOC,QAAU,CAAC,eAAe,oCAAoC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,wCAAwC,MAAQ,+B,iCCC9N,oEAAO,IAAMC,EAAW,SAACC,GACrB,IAAIA,EACJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAuB,SAACF,GACpD,GAAIA,EAAMG,OAASD,EAAW,MAAM,cAAN,OAAqBA,EAArB,e,kHCDrBE,EAA8BC,IAAMC,MAAK,YAAsB,IAApBC,EAAmB,EAAnBA,KAASC,EAAU,wBACvE,OAAO,0CAAQnB,UAAWC,IAAMmB,QACbD,GAEdD,O,oBCVTV,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,oBCA1DD,EAAOC,QAAU,CAAC,eAAiB,8BAA8B,MAAQ,qBAAqB,iBAAmB,gCAAgC,KAAO,oBAAoB,MAAQ,qBAAqB,OAAS,wB,2HCyDrMY,EAAiBC,YAAuC,CAACC,KAAM,SAA9CD,EAxCgE,SAAClB,GAC3F,OACI,0BAAMoB,SAAUpB,EAAMqB,aAAczB,UAAWC,IAAMsB,MACjD,yBAAKvB,UAAWC,IAAMyB,OAClB,kBAACC,EAAA,EAAD,CACIC,YAAa,QACVV,KAAM,QACNW,UAAWtB,IACXuB,SAAU,CAACpB,QAGtB,yBAAKV,UAAWC,IAAMyB,OAClB,kBAACC,EAAA,EAAD,CACIC,YAAa,WACVV,KAAM,WACNW,UAAWtB,IACXuB,SAAU,CAACpB,KACXqB,KAAM,cAGhB3B,EAAMR,OAAS,yBAAKI,UAAWC,IAAM+B,kBACjC5B,EAAMR,OAEX,6BACI,kBAAC+B,EAAA,EAAD,CAAOE,UAAW,QACXX,KAAM,aACNa,KAAM,aAHjB,gBAMC3B,EAAM6B,SAAW,yBAAKC,IAAK9B,EAAM6B,UACjC7B,EAAM6B,SAAY,kBAACN,EAAA,EAAD,CAAOE,UAAW,QACXX,KAAM,YAEhC,yBAAKlB,UAAWC,IAAMmB,QAClB,kBAACL,EAAA,EAAD,CAAQG,KAAM,e,uBCPfiB,uBARS,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,OACnBJ,QAASG,EAAME,KAAKL,WAKY,CAACM,aAA1BJ,EA9BD,SAAC/B,GAMX,OAAIA,EAAMiC,OAAe,kBAAC,IAAD,CAAUG,GAAI,aAGnC,yBAAKxC,UAAWC,IAAMwC,gBAClB,yBAAKzC,UAAWC,IAAMyC,OAClB,6BACI,4DAAiC,uBAAGC,KAAK,yCAAR,SACjC,sEACA,wDACA,8CAEJ,kBAACtB,EAAD,CAAgBG,SAfX,SAACoB,GACdxC,EAAMmC,QAAQK,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASX,UAcnCA,QAAS7B,EAAM6B","file":"static/js/7.aa485500.chunk.js","sourcesContent":["import React from 'react';\r\nimport style from './FormsControls.module.css'\r\n\r\n\r\ntype TextareaPropsType = HTMLFormElement & { placeholder: string }\r\n\r\nconst FormControl = ({input, meta: {touched, error}, children, element,}: any) => {\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={style.formControl + ' ' + (hasError ? style.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span className={style.error}>some error</span>}\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nexport const Textarea = (props: TextareaPropsType) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}></textarea></FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><input className={style.input} {...input} {...restProps}></input></FormControl>\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form-control\":\"FormsControls_form-control__3atU1\",\"formControl\":\"FormsControls_formControl__2HRcq\",\"error\":\"FormsControls_error__WpP4m\",\"formSummaryError\":\"FormsControls_formSummaryError__BXqTl\",\"input\":\"FormsControls_input__3uHaG\"};","import React from 'react';\r\n\r\nexport const required = (value: any) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: any) => {\r\n    if (value.length > maxLength) return `Max length ${maxLength} symbols`\r\n}\r\n","import React, {FC} from 'react';\r\nimport style from './Button.module.css'\r\n\r\ntype ButtonPropsType =\r\n    React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement> &\r\n    { name?: string };\r\n\r\nexport const Button: FC<ButtonPropsType> = React.memo(({name, ...rest}) => {\r\n    return <button className={style.button}\r\n                   {...rest}\r\n    >\r\n        {name}\r\n    </button>\r\n})","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3SsT2\",\"buton\":\"Button_buton__2yP8Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginContainer\":\"Login_loginContainer__1vHP4\",\"login\":\"Login_login__bRlNW\",\"formSummaryError\":\"Login_formSummaryError__3_nLZ\",\"form\":\"Login_form__3Rvqp\",\"field\":\"Login_field__1mzU5\",\"button\":\"Login_button__LlhPs\"};","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Input} from '../common/FormsControls/FormsControls';\r\nimport {required} from '../../utils/validators/validators';\r\nimport style from './Login.module.css'\r\nimport {Button} from '../common/Button/Button';\r\n\r\nexport type FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string | null\r\n}\r\n\r\nexport type LoginPropsType = {\r\n    captcha: null | string\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType,LoginPropsType> & LoginPropsType > = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={style.form}>\r\n            <div className={style.field}>\r\n                <Field\r\n                    placeholder={'email'}\r\n                       name={'email'}\r\n                       component={Input}\r\n                       validate={[required]}\r\n                />\r\n            </div>\r\n            <div className={style.field}>\r\n                <Field\r\n                    placeholder={'password'}\r\n                       name={'password'}\r\n                       component={Input}\r\n                       validate={[required]}\r\n                       type={'password'}\r\n                />\r\n            </div>\r\n            {props.error && <div className={style.formSummaryError}>\r\n                {props.error}\r\n            </div>}\r\n            <div>\r\n                <Field component={'input'}\r\n                       name={'rememberMe'}\r\n                       type={'checkbox'}\r\n                /> remember me\r\n            </div>\r\n            {props.captcha && <img src={props.captcha}/>}\r\n            {props.captcha &&  <Field component={'input'}\r\n                                      name={'captcha'}\r\n                                      />}\r\n            <div className={style.button}>\r\n                <Button name={'Login'}/>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const LoginReduxForm = reduxForm<FormDataType,LoginPropsType>({form: 'login'})(LoginForm)\r\n","import React from 'react';\r\nimport {FormDataType, LoginReduxForm} from './LoginReduxForm';\r\nimport {connect} from 'react-redux';\r\nimport {loginTC} from '../../reducers/AuthReducer/auth-reducer';\r\nimport {RootState} from '../../redux/redux-store';\r\nimport {Redirect} from 'react-router';\r\nimport style from './Login.module.css'\r\n\r\n\r\ntype LoginPropsType = {\r\n    loginTC: (email: string, password: string, rememberMe: boolean, captcha: string | null) => void\r\n    isAuth: boolean\r\n    captcha: null | string\r\n}\r\n\r\nconst Login = (props: LoginPropsType) => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.loginTC(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (props.isAuth) return <Redirect to={'/profile'}/>\r\n\r\n    return (\r\n        <div className={style.loginContainer}>\r\n            <div className={style.login}>\r\n                <div>\r\n                    <p>To log in get registered here <a href='https://social-network.samuraijs.com/'>here</a></p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </div>\r\n                <LoginReduxForm onSubmit={onSubmit} captcha={props.captcha}/>\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        captcha: state.auth.captcha\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {loginTC})(Login);"],"sourceRoot":""}