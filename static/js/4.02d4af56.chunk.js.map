{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.tsx","assets/images/user.png","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","hoc/WithAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/ProfileInfo/ProfileStatusWithHook.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileData/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/Post/AddNewPostReduxForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","FormControl","input","meta","touched","error","children","hasError","element","className","styles","formControl","Textarea","props","restProps","child","Input","required","value","maxLengthCreator","maxLength","length","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","unsupportedIterableToArray","TypeError","mapStateToPropsForRedirect","state","isAuth","auth","WithAuthRedirect","Component","RedirectComponent","this","to","React","connect","ProfileStatusWithHook","useState","editMode","setEditMode","status","setStatus","useEffect","onBlur","changeUserStatus","type","autoFocus","onChange","e","currentTarget","onDoubleClick","ProfileData","style","field","profile","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","keys","contacts","map","el","key","contactValue","contactTitle","isOwner","onClick","onEditMode","ProfileDataReduxForm","reduxForm","form","onSubmit","handleSubmit","formSummaryError","styleField","Field","placeholder","name","component","validate","htmlFor","Contact","ProfileInfo","userInfo","photoBlock","src","photos","large","userPhoto","alt","target","files","savePhoto","description","initialValues","formData","saveProfileData","then","Loader","Post","s","posts","item","message","likeCounts","maxLength15","AddNewPostReduxForm","MyPosts","memo","postElements","post","id","postsBlock","addPost","newBodyPost","MyPostsContainer","profilePage","dispatch","text","addPostAC","Profile","ProfileContainer","userId","match","params","authorisedUserId","history","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","snapshot","ChangeMyPhoto","compose","withRouter"],"mappings":"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","file":"static/js/4.02d4af56.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form-control\":\"FormsControls_form-control__3atU1\",\"formControl\":\"FormsControls_formControl__2HRcq\",\"error\":\"FormsControls_error__WpP4m\",\"formSummaryError\":\"FormsControls_formSummaryError__BXqTl\"};","import React from 'react';\r\nimport styles from './FormsControls.module.css'\r\n\r\n\r\ntype TextareaPropsType = HTMLFormElement & { placeholder: string }\r\n\r\nconst FormControl = ({input, meta: {touched, error}, children, element,}: any) => {\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span className={styles.error}>some error</span>}\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nexport const Textarea = (props: TextareaPropsType) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}></textarea></FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}></input></FormControl>\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport const required = (value: any) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: any) => {\r\n    if (value.length > maxLength) return `Max length ${maxLength} symbols`\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/user.d380cc81.png\";","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React from 'react';\r\nimport {Redirect} from 'react-router';\r\nimport {RootState} from '../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapStateToPropsForRedirect = (state: RootState) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const WithAuthRedirect = (Component: any) => {\r\n    class RedirectComponent extends React.Component<any> {\r\n\r\n        render() {\r\n\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"field\":\"ProfileData_field__2AUAN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photoBlock\":\"ProfileInfo_photoBlock__147me\",\"description\":\"ProfileInfo_description__20bz2\",\"userInfo\":\"ProfileInfo_userInfo__2ticv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2Q7NU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"MyPosts_btn__28qaX\",\"postsBlock\":\"MyPosts_postsBlock__2S_AM\",\"posts\":\"MyPosts_posts__1KbBC\",\"textarea\":\"MyPosts_textarea__nYGtn\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    changeUserStatus: (newStatus: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHook = (props: ProfileStatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeUserStatus(status)\r\n    }\r\n\r\n    const onChangeStatusText = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                editMode ?\r\n                    <div>\r\n                        <input onBlur={offEditMode}\r\n                               type=\"text\"\r\n                               autoFocus\r\n                               value={status}\r\n                               onChange={onChangeStatusText}\r\n                        />\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        <span onDoubleClick={onEditMode}>{props.status || 'No status'}</span>\r\n                    </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import {ProfileType} from '../../../../reducers/ProfileReducer/profile-reducer';\r\nimport React from 'react';\r\nimport {Contact} from '../ProfileInfo';\r\nimport style from './ProfileData.module.css'\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    isOwner: boolean\r\n    onEditMode: () => void\r\n}\r\nexport const ProfileData = (props: ProfileDataPropsType) => {\r\n    return <div>\r\n        <div className={style.field}>\r\n            Full name: {props.profile.fullName}\r\n        </div>\r\n        <div className={style.field}>\r\n            About me: {props.profile.aboutMe}\r\n        </div>\r\n        <div className={style.field}>\r\n            Looking for a job: {props.profile.lookingForAJob ? 'Yes' : 'No'}\r\n        </div>\r\n        {props.profile.lookingForAJob && <div className={style.field}>\r\n            My skills: {props.profile.lookingForAJobDescription}\r\n        </div>}\r\n        <div className={style.field}>Status: {props.status}</div>\r\n        <div className={style.field}> Contacts :\r\n            {Object.keys(props.profile.contacts).map((el) => <Contact key={el}\r\n                                                                      contactValue={props.profile?.contacts[el]}\r\n                                                                      contactTitle={el}/>)}\r\n        </div>\r\n        {props.isOwner && <button onClick={props.onEditMode}>Edit Profile</button>}\r\n    </div>\r\n}","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Input, Textarea} from '../../../common/FormsControls/FormsControls';\r\nimport {required} from '../../../../utils/validators/validators';\r\nimport {ContactsType} from '../../../../reducers/ProfileReducer/profile-reducer';\r\nimport style from '../../../common/FormsControls/FormsControls.module.css';\r\nimport styleField from './ProfileData.module.css'\r\n\r\nexport type FormDataType = {\r\n    fullName: string\r\n    aboutMe: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n}\r\n\r\nexport type ContactsPropsType = {\r\n    contacts: ContactsType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<FormDataType, ContactsPropsType> & ContactsPropsType> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        {props.error && <div className={style.formSummaryError}>\r\n            {props.error}\r\n        </div>}\r\n        <div className={styleField.field}>\r\n            Full name: <Field placeholder={'Full name'}\r\n                              name={'fullName'}\r\n                              component={Input}\r\n                              validate={[required]}/>\r\n        </div>\r\n        <div className={styleField.field}>\r\n            About me: <Field placeholder={'About Me'}\r\n                             name={'aboutMe'}\r\n                             component={Textarea}\r\n                             validate={[required]}/>\r\n        </div>\r\n        <div className={styleField.field}>\r\n            <label htmlFor=\"lookingForAJob\"> Looking for a job:</label>\r\n            <Field\r\n                name={'lookingForAJob'}\r\n                component={Input}\r\n                type=\"checkbox\"\r\n            />\r\n        </div>\r\n        <div className={styleField.field}>\r\n            My professional skills: <Field placeholder={'My professional skills'}\r\n                                           name={'lookingForAJobDescription'}\r\n                                           component={Textarea}/>\r\n        </div>\r\n        <div className={styleField.field}> Contacts :\r\n            {Object.keys(props.contacts).map((el) => {\r\n                return <Field placeholder={el}\r\n                              name={`contacts.` + el}\r\n                              component={Input}\r\n                />\r\n            })}\r\n            {<button type={'submit'}>Save</button>}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nexport const ProfileDataReduxForm = reduxForm<FormDataType, ContactsPropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport style from './ProfileInfo.module.css';\r\nimport {ProfileStatusWithHook} from './ProfileStatusWithHook';\r\nimport {ProfileType} from '../../../reducers/ProfileReducer/profile-reducer';\r\nimport userPhoto from './../../../assets/images/user.png'\r\nimport {ProfileData} from './ProfileData/ProfileData';\r\nimport {FormDataType, ProfileDataReduxForm} from './ProfileData/ProfileDataForm';\r\nimport {Loader} from '../../common/Loader/Loader';\r\n\r\nfunction ProfileInfo(props: ProfileInfoPropsType) {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    if (!props.profile) {\r\n        return <Loader\r\n        />\r\n    }\r\n\r\n    const sendMyPhotoOnServer = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const onSubmit =  (formData: FormDataType) => {\r\n         props.saveProfileData(formData).then(() => {\r\n                 setEditMode(false)\r\n             }\r\n         )\r\n    }\r\n\r\n    return (\r\n        <div className={style.userInfo}>\r\n            <div className={style.photoBlock}>\r\n                <ProfileStatusWithHook {...props}/>\r\n                <img src={props.profile.photos.large || userPhoto} alt=\"\"/>\r\n                {props.isOwner && <input type={'file'} onChange={sendMyPhotoOnServer}></input>}\r\n            </div>\r\n            <div className={style.description}>\r\n                {editMode ?\r\n                    <ProfileDataReduxForm\r\n                        initialValues={props.profile}\r\n                        onSubmit={onSubmit}\r\n                        contacts={props.profile.contacts}\r\n                    /> :\r\n                    <ProfileData profile={props.profile}\r\n                                 status={props.status}\r\n                                 isOwner={props.isOwner}\r\n                                 onEditMode={onEditMode}\r\n\r\n                    />}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nexport const Contact = (props: ContactPropsType) => {\r\n    return <div>{props.contactTitle} : {props.contactValue}</div>\r\n}\r\n\r\n\r\nexport default ProfileInfo;\r\n\r\n\r\n//types\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    changeUserStatus: (newStatus: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n    saveProfileData: (profile: any) =>  any\r\n}","import React from \"react\";\r\nimport s from './Post.module.css'\r\n\r\nexport type PostPropsType = {\r\n    message : string,\r\n    likeCounts: number\r\n}\r\n\r\nfunction Post(props: PostPropsType) {\r\n    return (\r\n        <div>\r\n            <div className={s.posts}>\r\n                <div className={s.item}>\r\n                    <img\r\n                        src=\"https://www.pngitem.com/pimgs/m/80-800194_transparent-users-icon-png-flat-user-icon-png.png\"\r\n                        alt=\"\"/>\r\n                    {props.message}\r\n                    <div>\r\n                        <span>like</span>{props.likeCounts}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport {maxLengthCreator, required} from '../../../../utils/validators/validators';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../../../common/FormsControls/FormsControls';\r\n\r\n\r\nexport type PostFormDataType = {\r\n    newBodyPost: string\r\n}\r\n\r\nconst maxLength15 = maxLengthCreator(15)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<PostFormDataType>> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field component={Textarea}\r\n                   name='newBodyPost'\r\n                   placeholder={'Enter your text'}\r\n                   validate={[required,maxLength15 ]}\r\n            />\r\n        </div>\r\n        <div>\r\n            <button>Add post</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nexport const AddNewPostReduxForm = reduxForm<PostFormDataType>({form: 'post'})(AddNewPostForm)\r\n","import React from 'react';\r\nimport Post from './Post/Post'\r\nimport s from './MyPosts.module.css'\r\nimport {AddNewPostReduxForm, PostFormDataType} from './Post/AddNewPostReduxForm';\r\nimport {ProfilePageType} from '../../../reducers/ProfileReducer/profile-reducer';\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    addPost: (text: string) => void\r\n    posts: ProfilePageType\r\n}\r\n\r\n\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n    let postElements = props.posts.posts.map(post => <Post key={post.id} message={post.message}\r\n                                                           likeCounts={post.likeCounts}/>)\r\n\r\n    const addNewPost = (value: PostFormDataType) => {\r\n        props.addPost(value.newBodyPost)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.postsBlock}>\r\n                <h2>My posts</h2>\r\n                <div>\r\n                    <AddNewPostReduxForm onSubmit={addNewPost}/>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default MyPosts;","import React, {Dispatch} from 'react';\r\nimport {addPostAC} from \"../../../reducers/ProfileReducer/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from 'react-redux';\r\nimport {RootState} from '../../../redux/redux-store';\r\n\r\nlet mapStateToProps = (state: RootState) => {\r\n    return {\r\n        posts : state.profilePage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch<ReturnType<typeof addPostAC>>) => {\r\n    return {\r\n        addPost :  (text:string) => {\r\n            dispatch(addPostAC(text))\r\n        }\r\n    }\r\n}\r\n\r\nlet MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport {ProfileType} from '../../reducers/ProfileReducer/profile-reducer';\r\n\r\nfunction Profile(props: ProfilePropsType) {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         changeUserStatus={props.changeUserStatus}\r\n                         isOwner={props.isOwner}\r\n                         savePhoto={props.savePhoto}\r\n                         saveProfileData={props.saveProfileData}\r\n        />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n\r\n//types\r\ntype ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    changeUserStatus: (newStatus: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n    saveProfileData: (profile:any) => any\r\n}\r\n","import React from 'react';\r\nimport Profile from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {RootState} from '../../redux/redux-store';\r\nimport {\r\n    ChangeMyPhoto,\r\n    changeUserStatus,\r\n    getUserProfile,\r\n    getUserStatus,\r\n    ProfileType, saveProfileData\r\n} from '../../reducers/ProfileReducer/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router';\r\nimport {compose} from 'redux';\r\nimport {WithAuthRedirect} from '../../hoc/WithAuthRedirect';\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType, RootState> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorisedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerPropsType>, prevState: Readonly<RootState>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         changeUserStatus={this.props.changeUserStatus}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         savePhoto={this.props.ChangeMyPhoto}\r\n                         saveProfileData={this.props.saveProfileData}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorisedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, changeUserStatus, ChangeMyPhoto: ChangeMyPhoto,saveProfileData}),\r\n    WithAuthRedirect,\r\n    withRouter,\r\n)(ProfileContainer)\r\n\r\n//types\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorisedUserId: string\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    changeUserStatus: (newStatus: string) => void\r\n    ChangeMyPhoto: (photo: File) => void\r\n    saveProfileData: (profile:any) => any\r\n}\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype ProfileDetailParams = RouteComponentProps<PathParamsType>\r\ntype ProfileContainerPropsType = ProfileDetailParams & OwnPropsType\r\n"],"sourceRoot":""}