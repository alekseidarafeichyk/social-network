{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.tsx","hoc/WithAuthRedirect.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/ProfileInfo/ProfileStatusWithHook.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/Post/AddNewPostReduxForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","FormControl","input","meta","touched","error","children","hasError","element","className","styles","formControl","Textarea","props","restProps","child","Input","required","value","maxLengthCreator","maxLength","length","mapStateToPropsForRedirect","state","isAuth","auth","WithAuthRedirect","Component","RedirectComponent","this","to","React","connect","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","unsupportedIterableToArray","TypeError","ProfileStatusWithHook","useState","editMode","setEditMode","status","setStatus","useEffect","onBlur","changeUserStatus","type","autoFocus","onChange","e","currentTarget","onDoubleClick","ProfileInfo","profile","style","img","descriptionBlock","src","photos","large","alt","CircularProgress","disableShrink","size","Post","s","posts","item","message","likeCounts","maxLength15","AddNewPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","name","placeholder","validate","MyPosts","memo","postElements","map","post","key","id","postsBlock","addPost","newBodyPost","MyPostsContainer","profilePage","dispatch","text","addPostAC","Profile","ProfileContainer","userId","match","params","authorisedUserId","history","getUserProfile","getUserStatus","compose","withRouter"],"mappings":"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","file":"static/js/4.f944fbfa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form-control\":\"FormsControls_form-control__3atU1\",\"formControl\":\"FormsControls_formControl__2HRcq\",\"error\":\"FormsControls_error__WpP4m\",\"formSummaryError\":\"FormsControls_formSummaryError__BXqTl\"};","import React from 'react';\r\nimport styles from './FormsControls.module.css'\r\n\r\n\r\ntype TextareaPropsType = HTMLFormElement & { placeholder: string }\r\n\r\nconst FormControl = ({input, meta: {touched, error}, children, element,}: any) => {\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span className={styles.error}>some error</span>}\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nexport const Textarea = (props: TextareaPropsType) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}></textarea></FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}></input></FormControl>\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport const required = (value: any) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: any) => {\r\n    if (value.length > maxLength) return `Max length ${maxLength} symbols`\r\n}\r\n","import React from 'react';\r\nimport {Redirect} from 'react-router';\r\nimport {RootState} from '../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapStateToPropsForRedirect = (state: RootState) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const WithAuthRedirect = (Component: any) => {\r\n    class RedirectComponent extends React.Component<any> {\r\n\r\n        render() {\r\n\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2JBzW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2Q7NU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"MyPosts_btn__28qaX\",\"postsBlock\":\"MyPosts_postsBlock__2S_AM\",\"posts\":\"MyPosts_posts__1KbBC\",\"textarea\":\"MyPosts_textarea__nYGtn\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    changeUserStatus: (newStatus: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHook = (props: ProfileStatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeUserStatus(status)\r\n    }\r\n\r\n    const onChangeStatusText = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                editMode ?\r\n                    <div>\r\n                        <input onBlur={offEditMode}\r\n                               type=\"text\"\r\n                               autoFocus\r\n                               value={status}\r\n                               onChange={onChangeStatusText}\r\n                        />\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        <span onDoubleClick={onEditMode}>{props.status || 'No status'}</span>\r\n                    </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport style from './ProfileInfo.module.css';\r\nimport {CircularProgress} from '@material-ui/core';\r\nimport {ProfileStatusWithHook} from './ProfileStatusWithHook';\r\nimport {ProfileType} from '../../../reducers/ProfileReducer/profile-reducer';\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    changeUserStatus: (newStatus: string) => void\r\n}\r\n\r\nfunction ProfileInfo(props: ProfileInfoPropsType) {\r\n    if (!props.profile) {\r\n        return <CircularProgress\r\n            disableShrink\r\n            size={100}\r\n        />\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={style.img}>\r\n                <ProfileStatusWithHook {...props}/>\r\n            </div>\r\n            <div className={style.descriptionBlock}>\r\n                <img src={props.profile.photos.large} alt=\"\"/>\r\n                ava+description\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport s from './Post.module.css'\r\n\r\nexport type PostPropsType = {\r\n    message : string,\r\n    likeCounts: number\r\n}\r\n\r\nfunction Post(props: PostPropsType) {\r\n    return (\r\n        <div>\r\n            <div className={s.posts}>\r\n                <div className={s.item}>\r\n                    <img\r\n                        src=\"https://www.pngitem.com/pimgs/m/80-800194_transparent-users-icon-png-flat-user-icon-png.png\"\r\n                        alt=\"\"/>\r\n                    {props.message}\r\n                    <div>\r\n                        <span>like</span>{props.likeCounts}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport {maxLengthCreator, required} from '../../../../utils/validators/validators';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../../../common/FormsControls/FormsControls';\r\n\r\n\r\nexport type PostFormDataType = {\r\n    newBodyPost: string\r\n}\r\n\r\nconst maxLength15 = maxLengthCreator(15)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<PostFormDataType>> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field component={Textarea}\r\n                   name='newBodyPost'\r\n                   placeholder={'Enter your text'}\r\n                   validate={[required,maxLength15 ]}\r\n            />\r\n        </div>\r\n        <div>\r\n            <button>Add post</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nexport const AddNewPostReduxForm = reduxForm<PostFormDataType>({form: 'post'})(AddNewPostForm)\r\n","import React from 'react';\r\nimport Post from './Post/Post'\r\nimport s from './MyPosts.module.css'\r\nimport {AddNewPostReduxForm, PostFormDataType} from './Post/AddNewPostReduxForm';\r\nimport {ProfilePageType} from '../../../reducers/ProfileReducer/profile-reducer';\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    addPost: (text: string) => void\r\n    posts: ProfilePageType\r\n}\r\n\r\n\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n    let postElements = props.posts.posts.map(post => <Post key={post.id} message={post.message}\r\n                                                           likeCounts={post.likeCounts}/>)\r\n\r\n    const addNewPost = (value: PostFormDataType) => {\r\n        props.addPost(value.newBodyPost)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.postsBlock}>\r\n                <h2>My posts</h2>\r\n                <div>\r\n                    <AddNewPostReduxForm onSubmit={addNewPost}/>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default MyPosts;","import React, {Dispatch} from 'react';\r\nimport {addPostAC} from \"../../../reducers/ProfileReducer/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from 'react-redux';\r\nimport {RootState} from '../../../redux/redux-store';\r\n\r\nlet mapStateToProps = (state: RootState) => {\r\n    return {\r\n        posts : state.profilePage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch<ReturnType<typeof addPostAC>>) => {\r\n    return {\r\n        addPost :  (text:string) => {\r\n            dispatch(addPostAC(text))\r\n        }\r\n    }\r\n}\r\n\r\nlet MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport {ProfileType} from '../../reducers/ProfileReducer/profile-reducer';\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    changeUserStatus: (newStatus: string) => void\r\n}\r\n\r\nfunction Profile(props: ProfilePropsType) {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         changeUserStatus={props.changeUserStatus}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {RootState} from '../../redux/redux-store';\r\nimport {changeUserStatus, getUserProfile, getUserStatus, ProfileType} from '../../reducers/ProfileReducer/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router';\r\nimport {compose} from 'redux';\r\nimport {WithAuthRedirect} from '../../hoc/WithAuthRedirect';\r\n\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorisedUserId : string\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    changeUserStatus: (newStatus: string) => void\r\n}\r\n\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype ProfileDetailParams = RouteComponentProps<PathParamsType>\r\n\r\ntype ProfileContainerPropsType = ProfileDetailParams & OwnPropsType\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType, RootState> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorisedUserId;\r\n            if(!userId) {\r\n                this.props.history.push('login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         changeUserStatus={this.props.changeUserStatus}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorisedUserId : state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, changeUserStatus}),\r\n    WithAuthRedirect,\r\n    withRouter,\r\n)(ProfileContainer)"],"sourceRoot":""}