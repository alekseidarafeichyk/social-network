{"version":3,"sources":["components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormsControls.module.css","utils/validators/validators.tsx","assets/images/user.png","hoc/WithAuthRedirect.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/ProfileInfo/ProfileData/ProfileData.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileStatusWithHook.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileData/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/Post/AddNewPostReduxForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["FormControl","input","meta","touched","error","children","hasError","element","className","style","formControl","Textarea","props","restProps","child","Input","module","exports","required","value","maxLengthCreator","maxLength","length","mapStateToPropsForRedirect","state","isAuth","auth","WithAuthRedirect","Component","RedirectComponent","this","to","React","connect","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","unsupportedIterableToArray","TypeError","ProfileStatusWithHook","useState","editMode","setEditMode","status","setStatus","useEffect","margin","onBlur","changeUserStatus","type","autoFocus","onChange","e","currentTarget","onDoubleClick","ProfileData","contacts","keys","profile","map","el","key","contactValue","contactTitle","field","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","isOwner","Button","onClick","onEditMode","name","ProfileDataReduxForm","reduxForm","form","contact","Field","placeholder","component","onSubmit","handleSubmit","formSummaryError","styleField","validate","htmlFor","Contact","ProfileInfo","Loader","profileData","initialValues","formData","saveProfileData","then","userInfo","photoBlock","src","photos","large","userPhoto","alt","target","files","savePhoto","description","Post","srcImg","myPhoto","posts","item","message","likeCounts","maxLength15","AddNewPostReduxForm","MyPosts","memo","postElements","post","id","dispatch","useDispatch","postsBlock","addPost","newBodyPost","reset","MyPostsContainer","profilePage","small","text","addPostAC","Profile","showMyPosts","profileContainer","ProfileContainer","userId","match","params","authorisedUserId","history","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","snapshot","ChangeMyPhoto","compose","withRouter"],"mappings":"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","file":"static/js/4.02ad1c0e.chunk.js","sourcesContent":["import React from 'react';\r\nimport style from './FormsControls.module.css'\r\n\r\n\r\ntype TextareaPropsType = HTMLFormElement & { placeholder: string }\r\n\r\nconst FormControl = ({input, meta: {touched, error}, children, element,}: any) => {\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={style.formControl + ' ' + (hasError ? style.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span className={style.error}>some error</span>}\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nexport const Textarea = (props: TextareaPropsType) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><textarea  {...input} {...restProps}></textarea></FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><input className={style.input} {...input} {...restProps}></input></FormControl>\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form-control\":\"FormsControls_form-control__3atU1\",\"formControl\":\"FormsControls_formControl__2HRcq\",\"error\":\"FormsControls_error__WpP4m\",\"formSummaryError\":\"FormsControls_formSummaryError__BXqTl\",\"contact\":\"FormsControls_contact__vx13F\",\"input\":\"FormsControls_input__3uHaG\",\"textarea\":\"FormsControls_textarea__3WMoi\"};","import React from 'react';\r\n\r\nexport const required = (value: any) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: any) => {\r\n    if (value.length > maxLength) return `Max length ${maxLength} symbols`\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/user.d380cc81.png\";","import React from 'react';\r\nimport {Redirect} from 'react-router';\r\nimport {RootState} from '../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapStateToPropsForRedirect = (state: RootState) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const WithAuthRedirect = (Component: any) => {\r\n    class RedirectComponent extends React.Component<any> {\r\n\r\n        render() {\r\n\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"field\":\"ProfileData_field__2AUAN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photoBlock\":\"ProfileInfo_photoBlock__147me\",\"description\":\"ProfileInfo_description__20bz2\",\"contact\":\"ProfileInfo_contact__1hR-X\",\"userInfo\":\"ProfileInfo_userInfo__2ticv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2Q7NU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"MyPosts_btn__28qaX\",\"postsBlock\":\"MyPosts_postsBlock__2S_AM\",\"posts\":\"MyPosts_posts__1KbBC\",\"textarea\":\"MyPosts_textarea__nYGtn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileContainer\":\"Profile_profileContainer__qktOA\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    changeUserStatus: (newStatus: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHook = (props: ProfileStatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeUserStatus(status)\r\n    }\r\n\r\n    const onChangeStatusText = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                editMode ?\r\n                    <div style={{margin:'10px'}}>\r\n                       Status: <input onBlur={offEditMode}\r\n                               type=\"text\"\r\n                               autoFocus\r\n                               value={status}\r\n                               onChange={onChangeStatusText}\r\n                        />\r\n                    </div>\r\n                    :\r\n                    <div style={{margin:'10px'}}>\r\n                      Status : <span onDoubleClick={onEditMode}>{props.status || 'No status'}</span>\r\n                    </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import {ProfileType} from '../../../../reducers/ProfileReducer/profile-reducer';\r\nimport React from 'react';\r\nimport {Contact} from '../ProfileInfo';\r\nimport style from './ProfileData.module.css'\r\nimport {Button} from '../../../common/Button/Button';\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    isOwner: boolean\r\n    onEditMode: () => void\r\n}\r\nexport const ProfileData = (props: ProfileDataPropsType) => {\r\n\r\n    const contacts =  Object.keys(props.profile.contacts).map((el) => <Contact key={el}\r\n                                                                               contactValue={props.profile?.contacts[el]}\r\n                                                                               contactTitle={el}/>)\r\n\r\n    return <div>\r\n        <div className={style.field}>\r\n            Full name: {props.profile.fullName}\r\n        </div>\r\n        <div className={style.field}>\r\n            About me: {props.profile.aboutMe}\r\n        </div>\r\n        <div className={style.field}>\r\n            Looking for a job: {props.profile.lookingForAJob ? 'Yes' : 'No'}\r\n        </div>\r\n        {props.profile.lookingForAJob && <div className={style.field}>\r\n            My skills: {props.profile.lookingForAJobDescription}\r\n        </div>}\r\n        <div className={style.field}>\r\n            Status: {props.status}\r\n        </div>\r\n        <div className={style.field}>\r\n            Contacts :\r\n            {contacts}\r\n        </div>\r\n        {props.isOwner && <Button onClick={props.onEditMode} name={'Edit Profile'}/>}\r\n    </div>\r\n}","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Input, Textarea} from '../../../common/FormsControls/FormsControls';\r\nimport {required} from '../../../../utils/validators/validators';\r\nimport {ContactsType} from '../../../../reducers/ProfileReducer/profile-reducer';\r\nimport style from '../../../common/FormsControls/FormsControls.module.css';\r\nimport styleField from './ProfileData.module.css'\r\nimport {Button} from '../../../common/Button/Button';\r\n\r\nexport type FormDataType = {\r\n    fullName: string\r\n    aboutMe: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n}\r\n\r\nexport type ContactsPropsType = {\r\n    contacts: ContactsType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<FormDataType, ContactsPropsType> & ContactsPropsType> = (props) => {\r\n\r\n    const contacts = Object.keys(props.contacts).map((el) => {\r\n        return <div className={style.contact}>\r\n        <Field placeholder={el}\r\n                      name={`contacts.` + el}\r\n                      component={Input}\r\n        />\r\n        </div>\r\n    })\r\n\r\n    return <form onSubmit={props.handleSubmit}>\r\n        {props.error && <div className={style.formSummaryError}>\r\n            {props.error}\r\n        </div>}\r\n        <div className={styleField.field}>\r\n            Full name: <Field placeholder={'Full name'}\r\n                              name={'fullName'}\r\n                              component={Input}\r\n                              validate={[required]}/>\r\n        </div>\r\n        <div className={styleField.field}>\r\n            About me: <Field placeholder={'About Me'}\r\n                             name={'aboutMe'}\r\n                             component={Textarea}\r\n                             validate={[required]}/>\r\n        </div>\r\n        <div className={styleField.field}>\r\n            <label htmlFor=\"lookingForAJob\"> Looking for a job:</label>\r\n            <Field\r\n                name={'lookingForAJob'}\r\n                component={Input}\r\n                type=\"checkbox\"\r\n            />\r\n        </div>\r\n        <div className={styleField.field}>\r\n            My professional skills: <Field placeholder={'My professional skills'}\r\n                                           name={'lookingForAJobDescription'}\r\n                                           component={Textarea}/>\r\n        </div>\r\n        <div className={styleField.field}> Contacts :\r\n            {contacts}\r\n            <Button type={'submit'} name={'Save'}/>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nexport const ProfileDataReduxForm = reduxForm<FormDataType, ContactsPropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport style from './ProfileInfo.module.css';\r\nimport {ProfileStatusWithHook} from './ProfileStatusWithHook';\r\nimport {ProfileType} from '../../../reducers/ProfileReducer/profile-reducer';\r\nimport userPhoto from './../../../assets/images/user.png'\r\nimport {ProfileData} from './ProfileData/ProfileData';\r\nimport {FormDataType, ProfileDataReduxForm} from './ProfileData/ProfileDataForm';\r\nimport {Loader} from '../../common/Loader/Loader';\r\n\r\nfunction ProfileInfo(props: ProfileInfoPropsType) {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    if (!props.profile) {\r\n        return <Loader\r\n        />\r\n    }\r\n\r\n    const sendMyPhotoOnServer = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const onSubmit =  (formData: FormDataType) => {\r\n         props.saveProfileData(formData).then(() => {\r\n                 setEditMode(false)\r\n             }\r\n         )\r\n    }\r\n\r\n    const profileData = editMode ?\r\n        <ProfileDataReduxForm\r\n            initialValues={props.profile}\r\n            onSubmit={onSubmit}\r\n            contacts={props.profile.contacts}\r\n        /> :\r\n        <ProfileData profile={props.profile}\r\n                     status={props.status}\r\n                     isOwner={props.isOwner}\r\n                     onEditMode={onEditMode}\r\n        />\r\n\r\n    return (\r\n        <div className={style.userInfo}>\r\n            <div className={style.photoBlock}>\r\n                <ProfileStatusWithHook {...props}/>\r\n                <img src={props.profile.photos.large || userPhoto} alt=\"\"/>\r\n                {props.isOwner && <input type={'file'} onChange={sendMyPhotoOnServer}></input>}\r\n            </div>\r\n            <div className={style.description}>\r\n                {profileData}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nexport const Contact = (props: ContactPropsType) => {\r\n    return <div className={style.contact}>{props.contactTitle} : {props.contactValue}</div>\r\n}\r\n\r\n\r\nexport default ProfileInfo;\r\n\r\n\r\n//types\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    changeUserStatus: (newStatus: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n    saveProfileData: (profile: any) =>  any\r\n}","import React from \"react\";\r\nimport style from './Post.module.css'\r\n\r\n\r\nexport type PostPropsType = {\r\n    message : string,\r\n    likeCounts: number\r\n    myPhoto: string | undefined\r\n}\r\n\r\nfunction Post(props: PostPropsType) {\r\n\r\n   const srcImg = props.myPhoto ? props.myPhoto : \"https://www.pngitem.com/pimgs/m/80-800194_transparent-users-icon-png-flat-user-icon-png.png\"\r\n\r\n    return (\r\n        <div>\r\n            <div className={style.posts}>\r\n                <div className={style.item}>\r\n                    <img src={srcImg}/>\r\n                    {props.message}\r\n                    <div>\r\n                        <span>like</span>{props.likeCounts}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport {maxLengthCreator, required} from '../../../../utils/validators/validators';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../../../common/FormsControls/FormsControls';\r\nimport {Button} from '../../../common/Button/Button';\r\n\r\n\r\nexport type PostFormDataType = {\r\n    newBodyPost: string\r\n}\r\n\r\nconst maxLength15 = maxLengthCreator(15)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<PostFormDataType>> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field component={Textarea}\r\n                   name='newBodyPost'\r\n                   placeholder={'Enter your text'}\r\n                   validate={[required,maxLength15 ]}\r\n            />\r\n        </div>\r\n        <div>\r\n            <Button name={'Add post'}/>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nexport const AddNewPostReduxForm = reduxForm<PostFormDataType>({form: 'post'})(AddNewPostForm)\r\n","import React from 'react';\r\nimport Post from './Post/Post'\r\nimport style from './MyPosts.module.css'\r\nimport {AddNewPostReduxForm, PostFormDataType} from './Post/AddNewPostReduxForm';\r\nimport {ProfilePageType} from '../../../reducers/ProfileReducer/profile-reducer';\r\nimport {reset} from 'redux-form';\r\nimport {useDispatch} from 'react-redux';\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    addPost: (text: string) => void\r\n    posts: ProfilePageType\r\n    myPhoto: string | undefined\r\n}\r\n\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n    let postElements = props.posts.posts.map(post => <Post key={post.id} message={post.message}\r\n                                                           likeCounts={post.likeCounts}\r\n                                                           myPhoto={props.myPhoto}\r\n\r\n    />)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const addNewPost = (value: PostFormDataType) => {\r\n        props.addPost(value.newBodyPost)\r\n        dispatch(reset('post'))\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={style.postsBlock}>\r\n                <h2>My posts</h2>\r\n                <div>\r\n                    <AddNewPostReduxForm onSubmit={addNewPost}/>\r\n                </div>\r\n            </div>\r\n            <div className={style.posts}>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default MyPosts;","import React, {Dispatch} from 'react';\r\nimport {addPostAC} from \"../../../reducers/ProfileReducer/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from 'react-redux';\r\nimport {RootState} from '../../../redux/redux-store';\r\n\r\nlet mapStateToProps = (state: RootState) => {\r\n    return {\r\n        posts : state.profilePage,\r\n        myPhoto: state.profilePage.profile?.photos.small\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch<ReturnType<typeof addPostAC>>) => {\r\n    return {\r\n        addPost :  (text:string) => {\r\n            dispatch(addPostAC(text))\r\n        }\r\n    }\r\n}\r\n\r\nlet MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport {ProfileType} from '../../reducers/ProfileReducer/profile-reducer';\r\nimport style from './Profile.module.css'\r\n\r\nfunction Profile(props: ProfilePropsType) {\r\n\r\n    const showMyPosts = props.isOwner ? <MyPostsContainer /> : null\r\n\r\n    return (\r\n        <div className={style.profileContainer}>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         changeUserStatus={props.changeUserStatus}\r\n                         isOwner={props.isOwner}\r\n                         savePhoto={props.savePhoto}\r\n                         saveProfileData={props.saveProfileData}\r\n        />\r\n            {showMyPosts}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n\r\n//types\r\ntype ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    changeUserStatus: (newStatus: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n    saveProfileData: (profile:any) => any\r\n}\r\n","import React from 'react';\r\nimport Profile from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {RootState} from '../../redux/redux-store';\r\nimport {\r\n    ChangeMyPhoto,\r\n    changeUserStatus,\r\n    getUserProfile,\r\n    getUserStatus,\r\n    ProfileType, saveProfileData\r\n} from '../../reducers/ProfileReducer/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router';\r\nimport {compose} from 'redux';\r\nimport {WithAuthRedirect} from '../../hoc/WithAuthRedirect';\r\nimport {strict} from 'assert';\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType, RootState> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorisedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerPropsType>, prevState: Readonly<RootState>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         changeUserStatus={this.props.changeUserStatus}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         savePhoto={this.props.ChangeMyPhoto}\r\n                         saveProfileData={this.props.saveProfileData}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorisedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, changeUserStatus, ChangeMyPhoto: ChangeMyPhoto,saveProfileData}),\r\n    WithAuthRedirect,\r\n    withRouter,\r\n)(ProfileContainer)\r\n\r\n//types\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorisedUserId: string\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    changeUserStatus: (newStatus: string) => void\r\n    ChangeMyPhoto: (photo: File) => void\r\n    saveProfileData: (profile:any) => any\r\n}\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype ProfileDetailParams = RouteComponentProps<PathParamsType>\r\ntype ProfileContainerPropsType = ProfileDetailParams & OwnPropsType\r\n"],"sourceRoot":""}