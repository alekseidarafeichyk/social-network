{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.tsx","hoc/WithAuthRedirect.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","FormControl","input","meta","touched","error","children","hasError","element","className","styles","formControl","Textarea","props","restProps","child","Input","required","value","maxLengthCreator","maxLength","length","mapStateToPropsForRedirect","state","isAuth","auth","WithAuthRedirect","Component","RedirectComponent","this","to","React","connect","DialogItem","path","id","s","dialog","name","Message","message","maxLength100","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","placeholder","validate","Dialogs","messagesElements","dialogsPage","messages","map","key","dialogsElement","dialogs","user","dialogsItems","formData","addMessage","newMessageBody","console","log","compose","dispatch","text","addMessageAC"],"mappings":"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","file":"static/js/5.befd01cd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form-control\":\"FormsControls_form-control__3atU1\",\"formControl\":\"FormsControls_formControl__2HRcq\",\"error\":\"FormsControls_error__WpP4m\",\"formSummaryError\":\"FormsControls_formSummaryError__BXqTl\"};","import React from 'react';\r\nimport styles from './FormsControls.module.css'\r\n\r\n\r\ntype TextareaPropsType = HTMLFormElement & { placeholder: string }\r\n\r\nconst FormControl = ({input, meta: {touched, error}, children, element,}: any) => {\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span className={styles.error}>some error</span>}\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nexport const Textarea = (props: TextareaPropsType) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}></textarea></FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}></input></FormControl>\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport const required = (value: any) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: any) => {\r\n    if (value.length > maxLength) return `Max length ${maxLength} symbols`\r\n}\r\n","import React from 'react';\r\nimport {Redirect} from 'react-router';\r\nimport {RootState} from '../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapStateToPropsForRedirect = (state: RootState) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const WithAuthRedirect = (Component: any) => {\r\n    class RedirectComponent extends React.Component<any> {\r\n\r\n        render() {\r\n\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2Os3r\",\"dialogsItems\":\"Dialogs_dialogsItems__16ib5\",\"dialog\":\"Dialogs_dialog__WVnHC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__1L2MG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Message_messages__nNm3Z\"};","import React from \"react\";\r\nimport s from './DialogItem.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemPropsType = {\r\n    name: string,\r\n    id: string,\r\n}\r\n\r\nfunction DialogItem(props: DialogItemPropsType) {\r\n    let path = \"/dialogs/\" + props.id\r\n\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from './Message.module.css'\r\n\r\ntype MessageTypeProps = {\r\n    message: string,\r\n};\r\n\r\nfunction Message(props: MessageTypeProps) {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    );\r\n}\r\n\r\nexport default Message;\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../common/FormsControls/FormsControls';\r\nimport {maxLengthCreator, required} from '../../utils/validators/validators';\r\nimport {DialogType, MessageType} from '../../reducers/DialogsReducer/dialogs-reducer';\r\n\r\n\r\ntype MessageFormDataType = {\r\n    newMessageBody: string\r\n}\r\nexport type DialogsPageType = {\r\n    dialogs: Array<DialogType>,\r\n    messages: Array<MessageType>,\r\n    newMessageText: string,\r\n}\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<MessageFormDataType>> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <Field component={Textarea}\r\n               name='newMessageBody'\r\n               placeholder={'Enter your message'}\r\n               validate={[required, maxLength100]}\r\n\r\n        />\r\n        <button>add message</button>\r\n    </form>\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<MessageFormDataType>({form: 'message'})(AddMessageForm)\r\n\r\n\r\ntype DialogsPropsType = {\r\n    dialogsPage: DialogsPageType,\r\n    isAuth: boolean\r\n    addMessage: (text: string) => void\r\n}\r\n\r\n\r\nfunction Dialogs(props: DialogsPropsType) {\r\n    let messagesElements = props.dialogsPage.messages.map(message => <Message key={message.id}\r\n                                                                              message={message.message}/>)\r\n    let dialogsElement = props.dialogsPage.dialogs.map(user => <DialogItem key={user.id} name={user.name}\r\n                                                                           id={user.id}/>)\r\n\r\n\r\n    const addNewMessage = (formData: MessageFormDataType) => {\r\n        props.addMessage(formData.newMessageBody)\r\n        console.log(formData)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElement}\r\n            </div>\r\n\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {addMessageAC} from '../../reducers/DialogsReducer/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {RootState} from '../../redux/redux-store';\r\nimport {WithAuthRedirect} from '../../hoc/WithAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\nlet mapState = (state: RootState) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nlet mapDispatch = (dispatch: any) => {\r\n    return {\r\n        addMessage : (text: string) => {\r\n            dispatch(addMessageAC(text))\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapState,mapDispatch),\r\n    WithAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}